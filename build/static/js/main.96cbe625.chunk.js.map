{"version":3,"sources":["constants/index.js","components/presentation/Chevron/Chevron.js","components/presentation/Accordion/Accordion.js","components/container/SortButton/SortButton.js","actions/index.js","types/index.js","utils/index.js","components/presentation/CheckBox/CheckBox.js","components/container/SpeciesView/SpeciesView.js","components/container/GenderView/GenderView.js","components/container/OriginView/OriginView.js","components/container/SearchView/SearchView.js","components/presentation/ListItem/ListItem.js","components/presentation/ListItems/ListItems.js","components/presentation/Footer/Footer.js","components/container/App/App.js","reducers/characterReducer.js","reducers/genderReducer.js","reducers/originReducer.js","reducers/speciesReducer.js","reducers/searchReducer.js","reducers/index.js","sagas/index.js","index.js"],"names":["Chevron","props","className","height","width","viewBox","xmlns","d","fill","Accordion","useState","setActive","setActiveState","setHeight","setHeightState","setRotate","setRotateState","content","useRef","onClick","current","scrollHeight","title","ref","style","maxHeight","SortButton","sortAscendingById","type","marginRight","sortDescendingById","Component","connect","dispatch","getCheckBoxData","charcters","data","isOrigin","checkBoxData","map","item","push","name","Set","CheckBox","addFilter","removeFilter","id","value","e","event","addFilteredData","removeFilteredData","target","checked","getFilteredData","htmlFor","SpeciesView","all_characters","this","speciesData","getSpeciesBox","index","key","state","character","payload","actionCreator","GenderView","genderData","addGenderFilteredData","removeGenderFilteredData","getGenderBox","OriginView","originData","addOriginFilteredData","removeOriginFilteredData","getOriginBox","SearchView","handleChange","addSearchText","placeholder","onChange","required","ListItem","indx","src","image","alt","createdDate","createdYear","Date","getFullYear","getCreatedYear","created","status","species","gender","origin","location","ListItems","filteredItem","Footer","position","top","href","rel","App","getSearchData","filteredOriginItem","search_text","length","filter","toLowerCase","includes","getOriginFilter","filteredGenderItem","filter_origin_data","indexOf","getGenderFilter","filter_gender_data","getSpeciesFilter","filter_data","getFilteredItem","getCharacters","search","initialState","error_text","rootReducer","combineReducers","action","concat","slice","sort","a","b","idx","OriginIdx","getCharactersAsync","rootSaga","call","fetch","response","json","console","log","results","all","put","takeLatest","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96cbe625.chunk.js","sourcesContent":["// END POINT URL for data fetching\r\nexport const ENDPOINT_URL = 'https://rickandmortyapi.com/api/character/';\r\nexport const REQUESTED_DATA_ERROR_TEXT = 'Something went wrong';\r\n\r\n// App component\r\nexport const APP_HEADING = 'Rick and Morty Show';\r\nexport const ACCORDION_TEXT = 'Want to filter Something ?';\r\n\r\n// GenderView Component\r\nexport const GENDER_FILTER = 'Gender Filter:';\r\nexport const GENDER = 'gender';\r\n\r\n// OriginView Component\r\nexport const ORIGIN_FILTER = 'Origin Filter:';\r\nexport const ORIGIN = 'origin';\r\n\r\n// SpeciesView Component\r\nexport const SPECIES_FILTER = 'Species Filter:';\r\nexport const SPECIES = 'species';\r\n\r\n// SearchView Component\r\nexport const NAME = 'Name';\r\n\r\n// SortButton Component\r\nexport const SORT_ASCENDING_TEXT = 'SORT ID BY ASC';\r\nexport const SORT_DESCENDING_TEXT = 'SORT ID BY DESC';\r\n\r\n// ListItem Component\r\nexport const STATUS_LIST = 'STATUS';\r\nexport const SPECIES_LIST = 'SPECIES';\r\nexport const GENDER_LIST = 'GENDER';\r\nexport const ORIGIN_LIST = 'ORIGIN';\r\nexport const LOCATION_LIST = 'LOCATION';\r\n\r\n// Footer Component\r\nexport const FOOTER_HEADING = '© 2020 Made with ❤️ by Kumar Ankur';\r\nexport const FOOTER_SUB_HEADING = 'Want to know more about me';\r\nexport const FOOTER_LINK = 'Explore by clicking here !!!';","import React from \"react\";\r\n\r\nfunction Chevron(props) {\r\n  return (\r\n    <svg\r\n      className={props.className}\r\n      height={props.height}\r\n      width={props.width}\r\n      viewBox=\"0 0 266 438\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        d=\"m258.476 235.971-194.344 194.343c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901l154.021-154.746-154.021-154.745c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0l194.343 194.343c9.373 9.372 9.373 24.568.001 33.941z\"\r\n        fill={props.fill}\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default Chevron;\r\n","import React, { useState, useRef } from \"react\";\r\nimport Chevron from \"../Chevron/Chevron\";\r\nimport \"./Accordion.scss\";\r\n\r\nfunction Accordion(props) {\r\n  const [setActive, setActiveState] = useState(\"\");\r\n  const [setHeight, setHeightState] = useState(\"0px\");\r\n  const [setRotate, setRotateState] = useState(\"accordion__icon\");\r\n  const content = useRef(null);\r\n\r\n  /**\r\n   * @function toggleAccordion\r\n   * @description - toggle accordion and set state (active, height, rotate)\r\n   */\r\n  function toggleAccordion() {\r\n    setActiveState(setActive === \"\" ? \"active\" : \"\");\r\n    setHeightState(\r\n      setActive === \"active\" ? \"0px\" : `${content.current.scrollHeight}px`\r\n    );\r\n\r\n    setRotateState(\r\n      setActive === \"active\" ? \"accordion__icon\" : \"accordion__icon rotate\"\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"accordion__section\">\r\n      <button className=\"accordion\" onClick={toggleAccordion}>\r\n        <p className=\"accordion__title\">{props.title}</p>\r\n        <Chevron className={`${setRotate}`} width={10} fill={\"#fff\"} />\r\n      </button>\r\n      <div\r\n        ref={content}\r\n        style={{ maxHeight: `${setHeight}` }}\r\n        className=\"accordion__content\"\r\n      >\r\n        <div className=\"accordion__text\">{props.content}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Accordion;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actionCreator from \"../../../actions\";\r\nimport * as constants from \"../../../constants\";\r\nimport \"./sortButton.scss\";\r\n\r\nclass SortButton extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <button\r\n          onClick={() => this.props.sortAscendingById()} // dispatch an action to sort data based on id in ascending order\r\n          type=\"submit\"\r\n          className=\"btn btn--animated btn--white\"\r\n          style={{ marginRight: \"1rem\" }}\r\n        >\r\n          {constants.SORT_ASCENDING_TEXT}\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.sortDescendingById()} // dispatch an action to sort data based on id in descending order\r\n          type=\"submit\"\r\n          className=\"btn btn--animated btn--white\"\r\n        >\r\n          {constants.SORT_DESCENDING_TEXT}\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sortAscendingById: () => dispatch(actionCreator.sortAscendingById()),\r\n    sortDescendingById: () => dispatch(actionCreator.sortDescendingById()),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(SortButton);\r\n","import * as actionTypes from \"../types\";\r\n\r\n/**\r\n * @function getCharacters\r\n * @description action types for fetching characters data from API using saga file and update the state.\r\n */\r\nexport function getCharacters() {\r\n  return { type: actionTypes.GET_CHARACTERS };\r\n}\r\n\r\n/**\r\n * @function getFilteredData\r\n * @param { Object } data - Filtered data\r\n * @description - filtered data based on payload value.\r\n */\r\nexport function getFilteredData(data) {\r\n  return { type: actionTypes.GET_FILTERED_DATA, payload: data };\r\n}\r\n\r\n/**\r\n * @function sortAscendingById\r\n * @description - sort all the character data in ascending order\r\n */\r\nexport function sortAscendingById() {\r\n  return { type: actionTypes.SORT_DATA_BY_ASCENDING };\r\n}\r\n\r\n/**\r\n * @function sortDescendingById\r\n * @description - sort all the character data in descending order.\r\n */\r\nexport function sortDescendingById() {\r\n  return { type: actionTypes.SORT_DATA_BY_DESCENDING };\r\n}\r\n\r\n/**\r\n * @function addFilteredData\r\n * @param { String } data\r\n * @description - add filtered data in string for species category state\r\n */\r\nexport function addFilteredData(data) {\r\n  return { type: actionTypes.ADD_FILTERED_DATA, payload: data };\r\n}\r\n\r\n/**\r\n * @function removeFilteredData\r\n * @param { String } data\r\n * @description - remove filtered data in string for species category state\r\n */\r\nexport function removeFilteredData(data) {\r\n  return { type: actionTypes.REMOVE_FILTERED_DATA, payload: data };\r\n}\r\n\r\n/**\r\n * @function addGenderFilteredData\r\n * @param { String } data\r\n * @description - add filtered data in string for gender category state\r\n */\r\nexport function addGenderFilteredData(data) {\r\n  return { type: actionTypes.ADD_GENDER_FILTERED_DATA, payload: data };\r\n}\r\n\r\n/**\r\n * @function removeGenderFilteredData\r\n * @param { String } data\r\n * @description - remove filtered data in string for gender category state\r\n */\r\nexport function removeGenderFilteredData(data) {\r\n  return { type: actionTypes.REMOVE_GENDER_FILTERED_DATA, payload: data };\r\n}\r\n\r\n/**\r\n * @function addOriginFilteredData\r\n * @param { String } data\r\n * @description - add filtered data in string for origin category state\r\n */\r\nexport function addOriginFilteredData(data) {\r\n  return { type: actionTypes.ADD_ORIGIN_FILTERED_DATA, payload: data };\r\n}\r\n\r\n/**\r\n * @function removeOriginFilteredData\r\n * @param { String } data\r\n * @description - remove filtered data in string for origin category state\r\n */\r\nexport function removeOriginFilteredData(data) {\r\n  return { type: actionTypes.REMOVE_ORIGIN_FILTERED_DATA, payload: data };\r\n}\r\n\r\n/**\r\n * @function addSearchText\r\n * @param { String } data\r\n * @description - add search data in string for search category state\r\n */\r\nexport function addSearchText(data) {\r\n  return { type: actionTypes.ADD_SEARCH_TEXT, payload: data };\r\n}\r\n","// All action types are listed here:\r\nexport const GET_CHARACTERS = 'GET_CHARACTERS';\r\nexport const GET_CHARACTERS_ASYNC = 'GET_CHARACTERS_ASYNC';\r\nexport const REQUESTED_DATA_ERROR = 'REQUESTED_DATA_ERROR';\r\nexport const GET_FILTERED_DATA = 'GET_FILTERED_DATA';\r\nexport const REMOVE_FILTERED_DATA = 'REMOVE_FILTERED_DATA';\r\nexport const SORT_DATA_BY_ASCENDING = 'SORT_DATA_BY_ASCENDING';\r\nexport const SORT_DATA_BY_DESCENDING = 'SORT_DATA_BY_DESCENDING';\r\nexport const SEARCH_DATA = 'SEARCH_DATA';\r\nexport const ADD_FILTERED_DATA = 'ADD_FILTERED_DATA';\r\nexport const ADD_GENDER_FILTERED_DATA = 'ADD_GENDER_FILTERED_DATA';\r\nexport const REMOVE_GENDER_FILTERED_DATA = 'REMOVE_GENDER_FILTERED_DATA';\r\nexport const ADD_ORIGIN_FILTERED_DATA = 'ADD_ORIGIN_FILTERED_DATA';\r\nexport const REMOVE_ORIGIN_FILTERED_DATA = 'REMOVE_ORIGIN_FILTERED_DATA';\r\nexport const ADD_SEARCH_TEXT = 'ADD_SEARCH_TEXT';","/**\r\n * @function getCreatedYear\r\n * @param { Date } createdDate - Creation Date of Item\r\n * @returns { Number } - return difference of year between the present date and the creation date of item.\r\n */\r\nexport const getCreatedYear = (createdDate) => {\r\n  const createdYear = new Date(createdDate).getFullYear();\r\n  const presentYear = new Date().getFullYear();\r\n  return presentYear - createdYear;\r\n};\r\n\r\n/**\r\n * \r\n * @param { Array } charcters - All data fetched from API as array of object.\r\n * @param { String } data - Get filtered data title viz: gender, species, origin\r\n * @param { Boolean } isOrigin - check if data is coming from origin return true else false\r\n * @returns - return new array with no deuplicate data based on data param and isOrigin param\r\n */\r\nexport const getCheckBoxData = (charcters, data, isOrigin = false) => {\r\n  let checkBoxData = [];\r\n  charcters.map((item) => {\r\n    checkBoxData.push( item && (isOrigin ? item[data].name : item[data]));\r\n    return checkBoxData;\r\n  });\r\n\r\n  return [...new Set(checkBoxData)];\r\n};\r\n\r\n/**\r\n * @function getFilteredData \r\n * @param { Object } event - window event when user try to search/filter data.\r\n * @param { Function } addFilteredData - function to add the data in filter state\r\n * @param { Function} removeFilteredData - function to remove the data from filter state.\r\n */\r\nexport const getFilteredData = (event, addFilteredData, removeFilteredData) => {\r\n  if (event.target.checked) {\r\n    addFilteredData(event.target.value);\r\n  } else {\r\n    removeFilteredData(event.target.value);\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { getFilteredData } from \"../../../utils\";\r\n\r\nconst CheckBox = (props) => {\r\n  const { data, addFilter, removeFilter } = props;\r\n\r\n  /**\r\n   * @function handlecheckBox\r\n   * @param { Object } event - window Object for capturing event when user click on checkbox.\r\n   * @description - call getFilteredData function to dispatch the action to update the state based on checkbox selection.\r\n   */\r\n  const handlecheckBox = (event) => {\r\n    getFilteredData(event, addFilter, removeFilter);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"checkbox\"\r\n        id={data.id}\r\n        name={data}\r\n        value={data}\r\n        onClick={(e) => handlecheckBox(e)}\r\n      />\r\n      <label htmlFor={data}>{data}</label>\r\n      <br />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CheckBox;\r\n","import React, { Component } from \"react\";\r\nimport CheckBox from \"../../presentation/CheckBox/CheckBox\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actionCreator from \"../../../actions\";\r\nimport * as constants from \"../../../constants\";\r\nimport { getCheckBoxData } from '../../../utils';\r\nimport './SpeciesView.scss';\r\n\r\nclass SpeciesView extends Component {\r\n\r\n  render() {\r\n    const { all_characters } = this.props;\r\n    const speciesData = getCheckBoxData(all_characters, constants.SPECIES);\r\n    const { addFilteredData, removeFilteredData } = this.props;\r\n\r\n    const getSpeciesBox = speciesData.map((data, index) => {\r\n      return (\r\n        <div key={index}>\r\n          <CheckBox\r\n            data={data}\r\n            addFilter={addFilteredData}\r\n            removeFilter={removeFilteredData}\r\n          />\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"species-content\">\r\n          <h2>{ constants.SPECIES_FILTER }</h2>\r\n        <form>{getSpeciesBox}</form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    all_characters: state.character.all_characters,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addFilteredData: (data) => dispatch(actionCreator.addFilteredData(data)),\r\n    removeFilteredData: (data) =>\r\n      dispatch(actionCreator.removeFilteredData(data)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SpeciesView);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CheckBox from \"../../presentation/CheckBox/CheckBox\";\r\nimport * as actionCreator from \"../../../actions\";\r\nimport * as constants from \"../../../constants\";\r\nimport { getCheckBoxData } from \"../../../utils\";\r\nimport \"./GenderView.scss\";\r\n\r\nclass GenderView extends Component {\r\n  render() {\r\n    const { all_characters } = this.props;\r\n    const genderData = getCheckBoxData(all_characters, constants.GENDER);\r\n    const { addGenderFilteredData, removeGenderFilteredData } = this.props;\r\n\r\n    const getGenderBox = genderData.map((data, index) => {\r\n      return (\r\n        <div key={index}>\r\n          <CheckBox\r\n            data={data}\r\n            addFilter={addGenderFilteredData}\r\n            removeFilter={removeGenderFilteredData}\r\n          />\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"species-content\">\r\n        <h2>{ constants.GENDER_FILTER}</h2>\r\n        <form>{getGenderBox}</form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    all_characters: state.character.all_characters,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addGenderFilteredData: (data) =>\r\n      dispatch(actionCreator.addGenderFilteredData(data)),\r\n    removeGenderFilteredData: (data) =>\r\n      dispatch(actionCreator.removeGenderFilteredData(data)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GenderView);\r\n","import React, { Component } from \"react\";\r\nimport CheckBox from \"../../presentation/CheckBox/CheckBox\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actionCreator from \"../../../actions\";\r\nimport * as constants from \"../../../constants\";\r\nimport { getCheckBoxData } from '../../../utils';\r\nimport './OriginView.scss';\r\n\r\nclass OriginView extends Component {\r\n\r\n  render() {\r\n    const { all_characters } = this.props;\r\n    const originData = getCheckBoxData(all_characters, constants.ORIGIN, true);\r\n    const { addOriginFilteredData, removeOriginFilteredData } = this.props;\r\n    const getOriginBox = originData.map((data, index) => {\r\n      return (\r\n        <div key={index}>\r\n          <CheckBox\r\n            data={data}\r\n            addFilter={addOriginFilteredData}\r\n            removeFilter={removeOriginFilteredData}\r\n          />\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"species-content\">\r\n          <h2>{ constants.ORIGIN_FILTER }</h2>\r\n        <form>{getOriginBox}</form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    all_characters: state.character.all_characters,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addOriginFilteredData: (data) => dispatch(actionCreator.addOriginFilteredData(data)),\r\n    removeOriginFilteredData: (data) =>\r\n      dispatch(actionCreator.removeOriginFilteredData(data)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OriginView);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actionCreator from \"../../../actions\";\r\nimport * as constants from \"../../../constants\";\r\nimport \"./SearchView.scss\";\r\n\r\nclass SearchView extends Component {\r\n\r\n/**\r\n * @function handleChange\r\n * @param { Object } event - window event object when user type any word in text box\r\n * @description - Dispatch action to reducer to update the search text state.\r\n */\r\n  handleChange = (event) => {\r\n    const { addSearchText } = this.props;\r\n    // dispatch the event to update the search text state.\r\n    addSearchText(event.target.value);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"form__group field\">\r\n        <input\r\n          type=\"input\"\r\n          className=\"form__field\"\r\n          placeholder=\"Name\"\r\n          name=\"name\"\r\n          id=\"name\"\r\n          onChange={(e) => this.handleChange(e)}\r\n          required\r\n        />\r\n        <label htmlFor=\"name\" className=\"form__label\">\r\n          { constants.NAME }\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addSearchText: (data) => dispatch(actionCreator.addSearchText(data)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(SearchView);\r\n","import React from \"react\";\r\nimport \"./ListItem.scss\";\r\nimport { getCreatedYear } from \"../../../utils\";\r\nimport * as constants from \"../../../constants\";\r\n\r\nconst ListItem = (props) => {\r\n  const { item, indx } = props;\r\n  return (\r\n    <div key={indx} className=\"flex-item\">\r\n      <div className=\"flex-item_container\">\r\n        <img\r\n          src={item.image}\r\n          alt={item.name}\r\n          className=\"flex-item_container-img\"\r\n        />\r\n        <div className=\"flex-item_container-intro\">\r\n          <div className=\"flex-item_container-name\">{item.name} </div>\r\n          <div className=\"flex-item_container-creation\">\r\n            {`Id: ${item.id} - created ${getCreatedYear(\r\n              item.created\r\n            )} years ago`}{\" \"}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex-item_container-detail\">\r\n          <div className=\"flex-item_container-detail-status\">\r\n            <div className=\"flex-item_container-detail-title\">\r\n              {constants.STATUS_LIST}\r\n            </div>\r\n            <div className=\"flex-item_container-detail-value\">\r\n              {item.status}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex-item_container-detail-species\">\r\n            <div className=\"flex-item_container-detail-title\">\r\n              {constants.SPECIES_LIST}\r\n            </div>\r\n            <div className=\"flex-item_container-detail-value\">\r\n              {item.species}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex-item_container-detail-gender\">\r\n            <div className=\"flex-item_container-detail-title\">\r\n              {constants.GENDER_LIST}\r\n            </div>\r\n            <div className=\"flex-item_container-detail-value\">\r\n              {item.gender}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex-item_container-detail-origin\">\r\n            <div className=\"flex-item_container-detail-title\">\r\n              {constants.ORIGIN_LIST}\r\n            </div>\r\n            <div className=\"flex-item_container-detail-value\">\r\n              {item.origin.name}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex-item_container-detail-location\">\r\n            <div className=\"flex-item_container-detail-title\">\r\n              {constants.LOCATION_LIST}\r\n            </div>\r\n            <div className=\"flex-item_container-detail-value\">\r\n              {item.location.name}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListItem;\r\n","import React from \"react\";\r\nimport ListItem from \"../ListItem/ListItem\";\r\n\r\nconst ListItems = (props) => {\r\n  const { filteredItem } = props;\r\n\r\n  return filteredItem.map((item, indx) => {\r\n    return <ListItem key={indx} item={item} indx={indx} />;\r\n  });\r\n};\r\n\r\nexport default ListItems;\r\n","import React from \"react\";\r\nimport \"./Footer.scss\";\r\nimport * as constanst from \"../../../constants\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer_container\">\r\n      <h2 className=\"footer_heading\">\r\n        {constanst.FOOTER_HEADING} <br />\r\n        <br />\r\n        <span style={{ position: 'absolute', top: '2rem'}}>{constanst.FOOTER_SUB_HEADING}{\" \"}</span>\r\n        <br />\r\n        <a href=\"http://kumarankur.in/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"footer_link\">\r\n          {constanst.FOOTER_LINK}\r\n        </a>\r\n      </h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actionCreator from \"../../../actions\";\r\nimport * as constants from \"../../../constants\";\r\nimport Accordion from \"../../presentation/Accordion/Accordion\";\r\nimport SortButton from \"../SortButton/SortButton\";\r\nimport SpeciesView from \"../SpeciesView/SpeciesView\";\r\nimport GenderView from \"../GenderView/GenderView\";\r\nimport OriginView from \"../OriginView/OriginView\";\r\nimport SearchView from \"../SearchView/SearchView\";\r\nimport ListItems from \"../../presentation/ListItems/ListItems\";\r\nimport Footer from \"../../presentation/Footer/Footer\";\r\nimport \"./App.scss\";\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    // dispatch action to get data from API\r\n    this.props.getCharacters();\r\n  }\r\n\r\n  /**\r\n   * @function getSearchData\r\n   * @param { Object } filteredOriginItem\r\n   * @description - function to filtered out data based on search text\r\n   * @returns { Object } - return the filtered data based on search text by user\r\n   */\r\n  getSearchData = (filteredOriginItem) => {\r\n    const { search_text } = this.props;\r\n    let filteredSearchItem =\r\n      search_text.length > 0\r\n        ? filteredOriginItem.filter((item) => {\r\n            return item.name.toLowerCase().includes(search_text.toLowerCase());\r\n          })\r\n        : filteredOriginItem;\r\n\r\n    return filteredSearchItem;\r\n  };\r\n\r\n  /**\r\n   * @function getOriginFilter\r\n   * @param { Object } filteredGenderItem\r\n   * @description - function to filtered out data based on origin\r\n   * @returns { Object } - return the filtered data based on Origin value\r\n   */\r\n  getOriginFilter = (filteredGenderItem) => {\r\n    const { filter_origin_data } = this.props;\r\n    const filteredOriginItem =\r\n      filter_origin_data.length > 0\r\n        ? filteredGenderItem.filter((item) => {\r\n            return filter_origin_data.indexOf(item.origin.name) >= 0;\r\n          })\r\n        : filteredGenderItem;\r\n\r\n    return this.getSearchData(filteredOriginItem);\r\n  };\r\n\r\n  /**\r\n   * @function getGenderFilter\r\n   * @param { Object } filteredItem\r\n   * @description - function to filtered out data based on gender\r\n   * @returns { Object } - return the filtered data based on gender value\r\n   */\r\n  getGenderFilter = (filteredItem) => {\r\n    const { filter_gender_data } = this.props;\r\n    let filteredGenderItem =\r\n      filter_gender_data.length > 0\r\n        ? filteredItem.filter((item) => {\r\n            return filter_gender_data.indexOf(item.gender) >= 0;\r\n          })\r\n        : filteredItem;\r\n\r\n    return this.getOriginFilter(filteredGenderItem);\r\n  };\r\n\r\n  /**\r\n   * @function getSpeciesFilter\r\n   * @param { Object } all_characters\r\n   * @param { Array } filter_data\r\n   * @description - function to filtered out data based on species\r\n   * @returns { Object } - return the filtered data based on species value\r\n   */\r\n  getSpeciesFilter = (all_characters, filter_data) => {\r\n    let filteredItem =\r\n      filter_data.length > 0\r\n        ? all_characters.filter((item) => {\r\n            return filter_data.indexOf(item.species) >= 0;\r\n          })\r\n        : all_characters;\r\n\r\n    return this.getGenderFilter(filteredItem);\r\n  };\r\n\r\n  /**\r\n   * @function getFilteredItem\r\n   * @description - function to return final filtered data based on species, origin, gender and search text.\r\n   */\r\n  getFilteredItem = () => {\r\n    const { all_characters, filter_data } = this.props;\r\n    return this.getSpeciesFilter(all_characters, filter_data);\r\n  };\r\n\r\n  render() {\r\n    let filteredItem = this.getFilteredItem();\r\n    return (\r\n      <div className=\"main\">\r\n        <div className=\"main_heading\">{constants.APP_HEADING}</div>\r\n            <div className=\"sortBox\">\r\n              <SortButton />\r\n            </div>\r\n            <div className=\"main_functionality\">\r\n              <div className=\"main_functionality-species\">\r\n                <Accordion\r\n                  title={constants.ACCORDION_TEXT}\r\n                  content={[<SpeciesView />, <GenderView />, <OriginView />]}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"main_input\">\r\n              <SearchView />\r\n            </div>\r\n            <div className=\"viewcontent\">\r\n              <ListItems filteredItem={filteredItem} />\r\n            </div>\r\n            <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    all_characters: state.character.all_characters,\r\n    filter_data: state.species.filter_data,\r\n    filter_gender_data: state.gender.filter_gender_data,\r\n    filter_origin_data: state.origin.filter_origin_data,\r\n    search_text: state.search.search_text,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getCharacters: () => dispatch(actionCreator.getCharacters()),\r\n    sortAscendingById: () => dispatch(actionCreator.sortAscendingById()),\r\n    sortDescendingById: () => dispatch(actionCreator.sortDescendingById()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import * as actionTypes from \"../types\";\r\n\r\nconst initialState = {\r\n  all_characters: [],\r\n  error_text: ''\r\n};\r\n\r\n/**\r\n * @function characterReducer\r\n * @param { Object } state - Initial state of the character reducer\r\n * @param { String } action - dispatch action type to change state accordingly.\r\n * @returns { Object } state - return the updated state based on action type\r\n */\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_CHARACTERS_ASYNC:\r\n      return {\r\n        ...state,\r\n        all_characters: state.all_characters.concat(action.payload),\r\n        error_text: ''\r\n      };\r\n      case actionTypes.REQUESTED_DATA_ERROR:\r\n        return {\r\n          ...state,\r\n          all_characters: [],\r\n          error_text: action.payload\r\n        }\r\n    case actionTypes.SORT_DATA_BY_ASCENDING:\r\n      return {\r\n        ...state,\r\n        all_characters: state.all_characters\r\n          .slice()\r\n          .sort((a, b) => a.id - b.id),\r\n      };\r\n\r\n    case actionTypes.SORT_DATA_BY_DESCENDING:\r\n      return {\r\n        ...state,\r\n        all_characters: state.all_characters\r\n          .slice()\r\n          .sort((a, b) => b.id - a.id),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n","import * as actionTypes from \"../types\";\r\n\r\nconst initialState = {\r\n  filter_gender_data: [],\r\n};\r\n\r\n/**\r\n * @function genderReducer\r\n * @param { Object } state - Initial state of the character reducer\r\n * @param { String } action - dispatch action type to change state accordingly.\r\n * @returns { Object } state - return the updated state based on action type\r\n */\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.ADD_GENDER_FILTERED_DATA:\r\n      return {\r\n        ...state,\r\n        filter_gender_data: state.filter_gender_data.concat(action.payload),\r\n      };\r\n\r\n    case actionTypes.REMOVE_GENDER_FILTERED_DATA:\r\n      const idx = state.filter_gender_data.indexOf(action.payload);\r\n      return {\r\n        ...state,\r\n        filter_gender_data: state.filter_gender_data\r\n          .slice(0, idx)\r\n          .concat(\r\n            state.filter_gender_data.slice(\r\n              idx + 1,\r\n              state.filter_gender_data.length\r\n            )\r\n          ),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as actionTypes from \"../types\";\r\n\r\nconst initialState = {\r\n  filter_origin_data: [],\r\n};\r\n\r\n\r\n/**\r\n * @function originReducer\r\n * @param { Object } state - Initial state of the character reducer\r\n * @param { String } action - dispatch action type to change state accordingly.\r\n * @returns { Object } state - return the updated state based on action type\r\n */\r\n\r\nexport default  (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.ADD_ORIGIN_FILTERED_DATA:\r\n      return {\r\n        ...state,\r\n        filter_origin_data: state.filter_origin_data.concat(action.payload),\r\n      };\r\n\r\n    case actionTypes.REMOVE_ORIGIN_FILTERED_DATA:\r\n      const OriginIdx = state.filter_origin_data.indexOf(action.payload);\r\n      return {\r\n        ...state,\r\n        filter_origin_data: state.filter_origin_data\r\n          .slice(0, OriginIdx)\r\n          .concat(\r\n            state.filter_origin_data.slice(\r\n              OriginIdx + 1,\r\n              state.filter_origin_data.length\r\n            )\r\n          ),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as actionTypes from \"../types\";\r\n\r\nconst initialState = {\r\n  filter_data: [],\r\n};\r\n\r\n/**\r\n * @function speciesReducer\r\n * @param { Object } state - Initial state of the character reducer\r\n * @param { String } action - dispatch action type to change state accordingly.\r\n * @returns { Object } state - return the updated state based on action type\r\n */\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_FILTERED_DATA:\r\n      return {\r\n        ...state,\r\n        filter_data: state.filter_data.concat(action.data),\r\n      };\r\n\r\n    case actionTypes.ADD_FILTERED_DATA:\r\n      return {\r\n        ...state,\r\n        filter_data: state.filter_data.concat(action.payload),\r\n      };\r\n\r\n    case actionTypes.REMOVE_FILTERED_DATA:\r\n      const index = state.filter_data.indexOf(action.payload);\r\n      return {\r\n        ...state,\r\n        filter_data: state.filter_data\r\n          .slice(0, index)\r\n          .concat(state.filter_data.slice(index + 1, state.filter_data.length)),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as actionTypes from \"../types\";\r\n\r\nconst initialState = {\r\n    search_text: ''\r\n  };\r\n\r\n/**\r\n * @function searchReducer\r\n * @param { Object } state - Initial state of the character reducer\r\n * @param { String } action - dispatch action type to change state accordingly.\r\n * @returns { Object } state - return the updated state based on action type\r\n */\r\n  export default  (state = initialState, action ) => {\r\n      switch( action.type ) {\r\n        case actionTypes.ADD_SEARCH_TEXT:\r\n            return {\r\n              ...state,\r\n              search_text: action.payload\r\n            }\r\n     \r\n         default:\r\n           return state;\r\n      }\r\n  }","import { combineReducers } from 'redux';\r\nimport characterReducer from './characterReducer';\r\nimport genderReducer from './genderReducer';\r\nimport originReducer from './originReducer';\r\nimport speciesReducer from './speciesReducer';\r\nimport searchReducer from './searchReducer';\r\n\r\n/**\r\n * @function rootReducer\r\n * @description - combineReducer used to make a rootReducer as a single point of contact to reducer.\r\n */\r\nconst rootReducer = combineReducers({\r\n  character: characterReducer,\r\n  gender: genderReducer,\r\n  origin: originReducer,\r\n  species: speciesReducer,\r\n  search: searchReducer\r\n})\r\n\r\nexport default rootReducer;\r\n","import { put, takeLatest, call, all } from \"redux-saga/effects\";\r\nimport * as constants from \"../constants\";\r\nimport * as actionTypes from \"../types\";\r\n\r\n/**\r\n * @function getCharactersAsync\r\n * @description - dispatch an action when data are fetched from API alongwith payload data passed to reducer to update the state.\r\n */\r\nexport function* getCharactersAsync() {\r\n  try {\r\n    const endpoint = constants.ENDPOINT_URL;\r\n    const response = yield call(fetch, endpoint);\r\n    const data = yield response.json();\r\n    console.log(data.results);\r\n    yield all([\r\n      put({ type: actionTypes.GET_CHARACTERS_ASYNC, payload: data.results }),\r\n    ]);\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put({ type: actionTypes.REQUESTED_DATA_ERROR, payload: constants.REQUESTED_DATA_ERROR_TEXT })\r\n  }\r\n}\r\n\r\n/**\r\n * @function getCharacters\r\n * @returns dispatch the generator function  'GET_CHARACTERS' to fetch data from API.\r\n */\r\nexport function* getCharacters() {\r\n  yield takeLatest(\"GET_CHARACTERS\", getCharactersAsync);\r\n}\r\nexport default function* rootSaga() {\r\n  yield all([getCharacters()]);\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport App from './components/container/App/App';\r\nimport rootReducer from './reducers';\r\nimport rootSaga from './sagas';\r\nimport './styles/index.scss';\r\n\r\n// check redux devtools in window object and apply as a middleware.\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n// create the instance of create saga Middleware.\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\n// create the store with create store function and pass the same in provider.\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\r\n\r\n// Run the Saga Middleware as a watcher to check the rootSaga file.\r\nsagaMiddleware.run(rootSaga);\r\n\r\n// Render App component and pass store to each component with Provider\r\nReactDOM.render(\r\n    <Provider store={ store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}