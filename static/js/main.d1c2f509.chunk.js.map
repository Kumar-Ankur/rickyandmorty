{"version":3,"sources":["constants/index.js","components/presentation/Chevron/Chevron.js","components/presentation/Accordion/Accordion.js","components/container/SortButton/SortButton.js","actions/index.js","types/index.js","utils/index.js","components/presentation/CheckBox/CheckBox.js","components/container/SpeciesView/SpeciesView.js","components/container/GenderView/GenderView.js","components/container/OriginView/OriginView.js","components/container/SearchView/SearchView.js","components/presentation/ListItem/ListItem.js","components/presentation/ListItems/ListItems.js","components/presentation/Footer/Footer.js","components/container/App/App.js","reducers/characterReducer.js","reducers/genderReducer.js","reducers/originReducer.js","reducers/speciesReducer.js","reducers/searchReducer.js","reducers/index.js","sagas/index.js","index.js"],"names":["Chevron","props","data-test","className","height","width","viewBox","xmlns","d","fill","Accordion","useState","setActive","setActiveState","setHeight","setHeightState","setRotate","setRotateState","content","useRef","onClick","current","scrollHeight","title","ref","style","maxHeight","SortButton","sortAscendingById","type","marginRight","sortDescendingById","Component","connect","dispatch","getCheckBoxData","charcters","data","isOrigin","checkBoxData","map","item","push","name","Set","CheckBox","addFilter","removeFilter","id","value","e","event","addFilteredData","removeFilteredData","target","checked","getFilteredData","htmlFor","SpeciesView","all_characters","this","speciesData","getSpeciesBox","index","key","state","character","payload","actionCreator","GenderView","genderData","addGenderFilteredData","removeGenderFilteredData","getGenderBox","OriginView","originData","addOriginFilteredData","removeOriginFilteredData","getOriginBox","SearchView","handleChange","addSearchText","placeholder","onChange","required","ListItem","indx","src","image","alt","createdDate","createdYear","Date","getFullYear","getCreatedYear","created","status","species","gender","origin","location","ListItems","filteredItem","Footer","position","top","href","rel","App","getSearchData","filteredOriginItem","search_text","length","filter","toLowerCase","includes","getOriginFilter","filteredGenderItem","filter_origin_data","indexOf","getGenderFilter","filter_gender_data","getSpeciesFilter","filter_data","getFilteredItem","getCharacters","search","initialState","error_text","rootReducer","combineReducers","action","concat","slice","sort","a","b","idx","OriginIdx","getCharactersAsync","rootSaga","call","fetch","response","json","all","put","results","takeLatest","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d1c2f509.chunk.js","sourcesContent":["// END POINT URL for data fetching\nexport const ENDPOINT_URL = 'https://rickandmortyapi.com/api/character/';\nexport const REQUESTED_DATA_ERROR_TEXT = 'Something went wrong';\n\n// App component\nexport const APP_HEADING = 'Rick and Morty Show';\nexport const ACCORDION_TEXT = 'Want to filter Something ?';\n\n// GenderView Component\nexport const GENDER_FILTER = 'Gender Filter:';\nexport const GENDER = 'gender';\n\n// OriginView Component\nexport const ORIGIN_FILTER = 'Origin Filter:';\nexport const ORIGIN = 'origin';\n\n// SpeciesView Component\nexport const SPECIES_FILTER = 'Species Filter:';\nexport const SPECIES = 'species';\n\n// SearchView Component\nexport const NAME = 'Name';\n\n// SortButton Component\nexport const SORT_ASCENDING_TEXT = 'SORT ID BY ASC';\nexport const SORT_DESCENDING_TEXT = 'SORT ID BY DESC';\n\n// ListItem Component\nexport const STATUS_LIST = 'STATUS';\nexport const SPECIES_LIST = 'SPECIES';\nexport const GENDER_LIST = 'GENDER';\nexport const ORIGIN_LIST = 'ORIGIN';\nexport const LOCATION_LIST = 'LOCATION';\n\n// Footer Component\nexport const FOOTER_HEADING = '© 2020 Made with ❤️ by Kumar Ankur';\nexport const FOOTER_SUB_HEADING = 'Want to know more about me';\nexport const FOOTER_LINK = 'Explore by clicking here !!!';","import React from \"react\";\n\nfunction Chevron(props) {\n  return (\n    <svg\n      data-test=\"component-chevron\"\n      className={props.className}\n      height={props.height}\n      width={props.width}\n      viewBox=\"0 0 266 438\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"m258.476 235.971-194.344 194.343c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901l154.021-154.746-154.021-154.745c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0l194.343 194.343c9.373 9.372 9.373 24.568.001 33.941z\"\n        fill={props.fill}\n      />\n    </svg>\n  );\n}\n\nexport default Chevron;\n","import React, { useState, useRef } from \"react\";\nimport Chevron from \"../Chevron/Chevron\";\nimport \"./Accordion.scss\";\n\nfunction Accordion(props) {\n  const [setActive, setActiveState] = useState(\"\");\n  const [setHeight, setHeightState] = useState(\"0px\");\n  const [setRotate, setRotateState] = useState(\"accordion__icon\");\n  const content = useRef(null);\n\n  /**\n   * @function toggleAccordion\n   * @description - toggle accordion and set state (active, height, rotate)\n   */\n  function toggleAccordion() {\n    setActiveState(setActive === \"\" ? \"active\" : \"\");\n    setHeightState(\n      setActive === \"active\"\n        ? \"0px\"\n        : `${\n            content && content.current && content.current.scrollHeight\n              ? content.current.scrollHeight\n              : 0\n          }px`\n    );\n\n    setRotateState(\n      setActive === \"active\" ? \"accordion__icon\" : \"accordion__icon rotate\"\n    );\n  }\n\n  return (\n    <div className=\"accordion__section\" data-test=\"component-accordion\">\n      <button\n        className=\"accordion\"\n        onClick={toggleAccordion}\n        data-test=\"component-button\"\n      >\n        <p className=\"accordion__title\">{props.title}</p>\n        <Chevron className={`${setRotate}`} width={10} fill={\"#fff\"} />\n      </button>\n      <div\n        data-test=\"component-accordion-content\"\n        ref={content}\n        style={{ maxHeight: `${setHeight}` }}\n        className=\"accordion__content\"\n      >\n        <div className=\"accordion__text\" data-test=\"component-accordion-text\">\n          {props.content}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Accordion;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actionCreator from \"../../../actions\";\nimport * as constants from \"../../../constants\";\nimport \"./sortButton.scss\";\n\nclass SortButton extends Component {\n  render() {\n    return (\n      <>\n        <button\n          data-test=\"component-btn-asc\"\n          onClick={() => this.props.sortAscendingById()} // dispatch an action to sort data based on id in ascending order\n          type=\"submit\"\n          className=\"btn btn--animated btn--white\"\n          style={{ marginRight: \"1rem\" }}\n        >\n          {constants.SORT_ASCENDING_TEXT}\n        </button>\n        <button\n          data-test=\"component-btn-desc\"\n          onClick={() => this.props.sortDescendingById()} // dispatch an action to sort data based on id in descending order\n          type=\"submit\"\n          className=\"btn btn--animated btn--white\"\n        >\n          {constants.SORT_DESCENDING_TEXT}\n        </button>\n      </>\n    );\n  }\n}\n\nexport const mapDispatchToProps = (dispatch) => {\n  return {\n    sortAscendingById: () => dispatch(actionCreator.sortAscendingById()),\n    sortDescendingById: () => dispatch(actionCreator.sortDescendingById()),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(SortButton);\n","import * as actionTypes from \"../types\";\n\n/**\n * @function getCharacters\n * @description action types for fetching characters data from API using saga file and update the state.\n */\nexport function getCharacters() {\n  return { type: actionTypes.GET_CHARACTERS };\n}\n\n/**\n * @function getFilteredData\n * @param { Object } data - Filtered data\n * @description - filtered data based on payload value.\n */\nexport function getFilteredData(data) {\n  return { type: actionTypes.GET_FILTERED_DATA, payload: data };\n}\n\n/**\n * @function sortAscendingById\n * @description - sort all the character data in ascending order\n */\nexport function sortAscendingById() {\n  return { type: actionTypes.SORT_DATA_BY_ASCENDING };\n}\n\n/**\n * @function sortDescendingById\n * @description - sort all the character data in descending order.\n */\nexport function sortDescendingById() {\n  return { type: actionTypes.SORT_DATA_BY_DESCENDING };\n}\n\n/**\n * @function addFilteredData\n * @param { String } data\n * @description - add filtered data in string for species category state\n */\nexport function addFilteredData(data) {\n  return { type: actionTypes.ADD_FILTERED_DATA, payload: data };\n}\n\n/**\n * @function removeFilteredData\n * @param { String } data\n * @description - remove filtered data in string for species category state\n */\nexport function removeFilteredData(data) {\n  return { type: actionTypes.REMOVE_FILTERED_DATA, payload: data };\n}\n\n/**\n * @function addGenderFilteredData\n * @param { String } data\n * @description - add filtered data in string for gender category state\n */\nexport function addGenderFilteredData(data) {\n  return { type: actionTypes.ADD_GENDER_FILTERED_DATA, payload: data };\n}\n\n/**\n * @function removeGenderFilteredData\n * @param { String } data\n * @description - remove filtered data in string for gender category state\n */\nexport function removeGenderFilteredData(data) {\n  return { type: actionTypes.REMOVE_GENDER_FILTERED_DATA, payload: data };\n}\n\n/**\n * @function addOriginFilteredData\n * @param { String } data\n * @description - add filtered data in string for origin category state\n */\nexport function addOriginFilteredData(data) {\n  return { type: actionTypes.ADD_ORIGIN_FILTERED_DATA, payload: data };\n}\n\n/**\n * @function removeOriginFilteredData\n * @param { String } data\n * @description - remove filtered data in string for origin category state\n */\nexport function removeOriginFilteredData(data) {\n  return { type: actionTypes.REMOVE_ORIGIN_FILTERED_DATA, payload: data };\n}\n\n/**\n * @function addSearchText\n * @param { String } data\n * @description - add search data in string for search category state\n */\nexport function addSearchText(data) {\n  return { type: actionTypes.ADD_SEARCH_TEXT, payload: data };\n}\n","// All action types are listed here:\nexport const GET_CHARACTERS = 'GET_CHARACTERS';\nexport const GET_CHARACTERS_ASYNC = 'GET_CHARACTERS_ASYNC';\nexport const REQUESTED_DATA_ERROR = 'REQUESTED_DATA_ERROR';\nexport const GET_FILTERED_DATA = 'GET_FILTERED_DATA';\nexport const REMOVE_FILTERED_DATA = 'REMOVE_FILTERED_DATA';\nexport const SORT_DATA_BY_ASCENDING = 'SORT_DATA_BY_ASCENDING';\nexport const SORT_DATA_BY_DESCENDING = 'SORT_DATA_BY_DESCENDING';\nexport const SEARCH_DATA = 'SEARCH_DATA';\nexport const ADD_FILTERED_DATA = 'ADD_FILTERED_DATA';\nexport const ADD_GENDER_FILTERED_DATA = 'ADD_GENDER_FILTERED_DATA';\nexport const REMOVE_GENDER_FILTERED_DATA = 'REMOVE_GENDER_FILTERED_DATA';\nexport const ADD_ORIGIN_FILTERED_DATA = 'ADD_ORIGIN_FILTERED_DATA';\nexport const REMOVE_ORIGIN_FILTERED_DATA = 'REMOVE_ORIGIN_FILTERED_DATA';\nexport const ADD_SEARCH_TEXT = 'ADD_SEARCH_TEXT';","/**\n * @function getCreatedYear\n * @param { Date } createdDate - Creation Date of Item\n * @returns { Number } - return difference of year between the present date and the creation date of item.\n */\nexport const getCreatedYear = (createdDate) => {\n  const createdYear = new Date(createdDate).getFullYear();\n  const presentYear = new Date().getFullYear();\n  return presentYear - createdYear;\n};\n\n/**\n * \n * @param { Array } charcters - All data fetched from API as array of object.\n * @param { String } data - Get filtered data title viz: gender, species, origin\n * @param { Boolean } isOrigin - check if data is coming from origin return true else false\n * @returns - return new array with no deuplicate data based on data param and isOrigin param\n */\nexport const getCheckBoxData = (charcters, data, isOrigin = false) => {\n  let checkBoxData = [];\n  charcters.map((item) => {\n    checkBoxData.push( item && (isOrigin ? item[data].name : item[data]));\n    return checkBoxData;\n  });\n\n  return [...new Set(checkBoxData)];\n};\n\n/**\n * @function getFilteredData \n * @param { Object } event - window event when user try to search/filter data.\n * @param { Function } addFilteredData - function to add the data in filter state\n * @param { Function} removeFilteredData - function to remove the data from filter state.\n */\nexport const getFilteredData = (event, addFilteredData, removeFilteredData) => {\n  if (event.target.checked) {\n    addFilteredData(event.target.value);\n    return true;\n  } else {\n    removeFilteredData(event.target.value);\n    return false;\n  }\n};\n","import React from \"react\";\nimport { getFilteredData } from \"../../../utils\";\n\nconst CheckBox = (props) => {\n  const { data, addFilter, removeFilter } = props;\n\n  /**\n   * @function handlecheckBox\n   * @param { Object } event - window Object for capturing event when user click on checkbox.\n   * @description - call getFilteredData function to dispatch the action to update the state based on checkbox selection.\n   */\n  const handlecheckBox = (event) => {\n    getFilteredData(event, addFilter, removeFilter);\n  };\n\n  return (\n    <>\n      <input\n        data-test=\"component-checkbox\"\n        type=\"checkbox\"\n        id={data}\n        name={data}\n        value={data}\n        onClick={(e) => handlecheckBox(e)}\n      />\n      <label htmlFor={data}>{data}</label>\n      <br />\n    </>\n  );\n};\n\nexport default CheckBox;\n","import React, { Component } from \"react\";\nimport CheckBox from \"../../presentation/CheckBox/CheckBox\";\nimport { connect } from \"react-redux\";\nimport * as actionCreator from \"../../../actions\";\nimport * as constants from \"../../../constants\";\nimport { getCheckBoxData } from '../../../utils';\nimport './SpeciesView.scss';\n\nclass SpeciesView extends Component {\n\n  render() {\n    const { all_characters } = this.props;\n    const speciesData = getCheckBoxData(all_characters, constants.SPECIES);\n    const { addFilteredData, removeFilteredData } = this.props;\n\n    const getSpeciesBox = speciesData.map((data, index) => {\n      return (\n        <div key={index}>\n          <CheckBox\n            data={data}\n            addFilter={addFilteredData}\n            removeFilter={removeFilteredData}\n          />\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"species-content\" data-test='component-species'>\n          <h2>{ constants.SPECIES_FILTER }</h2>\n        <form data-test='component-species-form'>{getSpeciesBox}</form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    all_characters: state.character.all_characters,\n  };\n};\n\nexport const mapDispatchToProps = (dispatch) => {\n  return {\n    addFilteredData: (data) => dispatch(actionCreator.addFilteredData(data)),\n    removeFilteredData: (data) =>\n      dispatch(actionCreator.removeFilteredData(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpeciesView);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CheckBox from \"../../presentation/CheckBox/CheckBox\";\nimport * as actionCreator from \"../../../actions\";\nimport * as constants from \"../../../constants\";\nimport { getCheckBoxData } from \"../../../utils\";\nimport \"./GenderView.scss\";\n\nclass GenderView extends Component {\n  render() {\n    const { all_characters } = this.props;\n    const genderData = getCheckBoxData(all_characters, constants.GENDER);\n    const { addGenderFilteredData, removeGenderFilteredData } = this.props;\n\n    const getGenderBox = genderData.map((data, index) => {\n      return (\n        <div key={index}>\n          <CheckBox\n            data={data}\n            addFilter={addGenderFilteredData}\n            removeFilter={removeGenderFilteredData}\n          />\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"species-content\" data-test='component-gender'>\n        <h2>{ constants.GENDER_FILTER}</h2>\n        <form data-test='component-gender-form'>{getGenderBox}</form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    all_characters: state.character.all_characters,\n  };\n};\n\nexport const mapDispatchToProps = (dispatch) => {\n  return {\n    addGenderFilteredData: (data) =>\n      dispatch(actionCreator.addGenderFilteredData(data)),\n    removeGenderFilteredData: (data) =>\n      dispatch(actionCreator.removeGenderFilteredData(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GenderView);\n","import React, { Component } from \"react\";\nimport CheckBox from \"../../presentation/CheckBox/CheckBox\";\nimport { connect } from \"react-redux\";\nimport * as actionCreator from \"../../../actions\";\nimport * as constants from \"../../../constants\";\nimport { getCheckBoxData } from '../../../utils';\nimport './OriginView.scss';\n\nclass OriginView extends Component {\n\n  render() {\n    const { all_characters } = this.props;\n    const originData = getCheckBoxData(all_characters, constants.ORIGIN, true);\n    const { addOriginFilteredData, removeOriginFilteredData } = this.props;\n    const getOriginBox = originData.map((data, index) => {\n      return (\n        <div key={index}>\n          <CheckBox\n            data={data}\n            addFilter={addOriginFilteredData}\n            removeFilter={removeOriginFilteredData}\n          />\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"species-content\" data-test='component-origin'>\n          <h2>{ constants.ORIGIN_FILTER }</h2>\n        <form data-test = 'component-origin-form'>{getOriginBox}</form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    all_characters: state.character.all_characters,\n  };\n};\n\nexport const mapDispatchToProps = (dispatch) => {\n  return {\n    addOriginFilteredData: (data) => dispatch(actionCreator.addOriginFilteredData(data)),\n    removeOriginFilteredData: (data) =>\n      dispatch(actionCreator.removeOriginFilteredData(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OriginView);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actionCreator from \"../../../actions\";\nimport * as constants from \"../../../constants\";\nimport \"./SearchView.scss\";\n\nclass SearchView extends Component {\n  /**\n   * @function handleChange\n   * @param { Object } event - window event object when user type any word in text box\n   * @description - Dispatch action to reducer to update the search text state.\n   */\n  handleChange = (event) => {\n    const { addSearchText } = this.props;\n    // dispatch the event to update the search text state.\n    addSearchText(event.target.value);\n  };\n  render() {\n    return (\n      <div className=\"form__group field\" data-test=\"component-search\">\n        <input\n          data-test=\"component-input\"\n          type=\"input\"\n          className=\"form__field\"\n          placeholder=\"Name\"\n          name=\"name\"\n          id=\"name\"\n          onChange={(e) => this.handleChange(e)}\n          required\n        />\n        <label htmlFor=\"name\" className=\"form__label\">\n          {constants.NAME}\n        </label>\n      </div>\n    );\n  }\n}\n\nexport const mapDispatchToProps = (dispatch) => {\n  return {\n    addSearchText: (data) => dispatch(actionCreator.addSearchText(data)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(SearchView);\n","import React from \"react\";\nimport \"./ListItem.scss\";\nimport { getCreatedYear } from \"../../../utils\";\nimport * as constants from \"../../../constants\";\n\nconst ListItem = (props) => {\n  const { item, indx } = props;\n  return (\n    <div key={indx} className=\"flex-item\">\n      <div className=\"flex-item_container\">\n        <img\n          src={item.image}\n          alt={item.name}\n          className=\"flex-item_container-img\"\n        />\n        <div className=\"flex-item_container-intro\">\n          <div className=\"flex-item_container-name\">{item.name} </div>\n          <div className=\"flex-item_container-creation\">\n            {`Id: ${item.id} - created ${getCreatedYear(\n              item.created\n            )} years ago`}{\" \"}\n          </div>\n        </div>\n\n        <div className=\"flex-item_container-detail\">\n          <div className=\"flex-item_container-detail-status\">\n            <div className=\"flex-item_container-detail-title\">\n              {constants.STATUS_LIST}\n            </div>\n            <div className=\"flex-item_container-detail-value\">\n              {item.status}\n            </div>\n          </div>\n\n          <div className=\"flex-item_container-detail-species\">\n            <div className=\"flex-item_container-detail-title\">\n              {constants.SPECIES_LIST}\n            </div>\n            <div className=\"flex-item_container-detail-value\">\n              {item.species}\n            </div>\n          </div>\n\n          <div className=\"flex-item_container-detail-gender\">\n            <div className=\"flex-item_container-detail-title\">\n              {constants.GENDER_LIST}\n            </div>\n            <div className=\"flex-item_container-detail-value\">\n              {item.gender}\n            </div>\n          </div>\n\n          <div className=\"flex-item_container-detail-origin\">\n            <div className=\"flex-item_container-detail-title\">\n              {constants.ORIGIN_LIST}\n            </div>\n            <div className=\"flex-item_container-detail-value\">\n              {item.origin.name}\n            </div>\n          </div>\n\n          <div className=\"flex-item_container-detail-location\">\n            <div className=\"flex-item_container-detail-title\">\n              {constants.LOCATION_LIST}\n            </div>\n            <div className=\"flex-item_container-detail-value\">\n              {item.location.name}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ListItem;\n","import React from \"react\";\nimport ListItem from \"../ListItem/ListItem\";\n\nconst ListItems = (props) => {\n  const { filteredItem } = props;\n\n  return filteredItem.map((item, indx) => {\n    return <ListItem key={indx} item={item} indx={indx} />;\n  });\n};\n\nexport default ListItems;\n","import React from \"react\";\nimport \"./Footer.scss\";\nimport * as constanst from \"../../../constants\";\n\nconst Footer = () => {\n  return (\n    <div className=\"footer_container\" data-test='component-footer'>\n      <h2 className=\"footer_heading\">\n        {constanst.FOOTER_HEADING} <br />\n        <br />\n        <span style={{ position: 'absolute', top: '2rem'}}>{constanst.FOOTER_SUB_HEADING}{\" \"}</span>\n        <br />\n        <a href=\"http://kumarankur.in/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"footer_link\">\n          {constanst.FOOTER_LINK}\n        </a>\n      </h2>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actionCreator from \"../../../actions\";\nimport * as constants from \"../../../constants\";\nimport Accordion from \"../../presentation/Accordion/Accordion\";\nimport SortButton from \"../SortButton/SortButton\";\nimport SpeciesView from \"../SpeciesView/SpeciesView\";\nimport GenderView from \"../GenderView/GenderView\";\nimport OriginView from \"../OriginView/OriginView\";\nimport SearchView from \"../SearchView/SearchView\";\nimport ListItems from \"../../presentation/ListItems/ListItems\";\nimport Footer from \"../../presentation/Footer/Footer\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  componentDidMount() {\n    // dispatch action to get data from API\n    this.props.getCharacters();\n  }\n\n  /**\n   * @function getSearchData\n   * @param { Object } filteredOriginItem\n   * @description - function to filtered out data based on search text\n   * @returns { Object } - return the filtered data based on search text by user\n   */\n  getSearchData = (filteredOriginItem) => {\n    const { search_text } = this.props;\n    let filteredSearchItem =\n      search_text.length > 0\n        ? filteredOriginItem.filter((item) => {\n            return item.name.toLowerCase().includes(search_text.toLowerCase());\n          })\n        : filteredOriginItem;\n\n    return filteredSearchItem;\n  };\n\n  /**\n   * @function getOriginFilter\n   * @param { Object } filteredGenderItem\n   * @description - function to filtered out data based on origin\n   * @returns { Object } - return the filtered data based on Origin value\n   */\n  getOriginFilter = (filteredGenderItem) => {\n    const { filter_origin_data } = this.props;\n    const filteredOriginItem =\n      filter_origin_data.length > 0\n        ? filteredGenderItem.filter((item) => {\n            return filter_origin_data.indexOf(item.origin.name) >= 0;\n          })\n        : filteredGenderItem;\n\n    return this.getSearchData(filteredOriginItem);\n  };\n\n  /**\n   * @function getGenderFilter\n   * @param { Object } filteredItem\n   * @description - function to filtered out data based on gender\n   * @returns { Object } - return the filtered data based on gender value\n   */\n  getGenderFilter = (filteredItem) => {\n    const { filter_gender_data } = this.props;\n    let filteredGenderItem =\n      filter_gender_data.length > 0\n        ? filteredItem.filter((item) => {\n            return filter_gender_data.indexOf(item.gender) >= 0;\n          })\n        : filteredItem;\n\n    return this.getOriginFilter(filteredGenderItem);\n  };\n\n  /**\n   * @function getSpeciesFilter\n   * @param { Object } all_characters\n   * @param { Array } filter_data\n   * @description - function to filtered out data based on species\n   * @returns { Object } - return the filtered data based on species value\n   */\n  getSpeciesFilter = (all_characters, filter_data) => {\n    let filteredItem =\n      filter_data.length > 0\n        ? all_characters.filter((item) => {\n            return filter_data.indexOf(item.species) >= 0;\n          })\n        : all_characters;\n\n    return this.getGenderFilter(filteredItem);\n  };\n\n  /**\n   * @function getFilteredItem\n   * @description - function to return final filtered data based on species, origin, gender and search text.\n   */\n  getFilteredItem = () => {\n    const { all_characters, filter_data } = this.props;\n    return this.getSpeciesFilter(all_characters, filter_data);\n  };\n\n  render() {\n    let filteredItem = this.getFilteredItem();\n    return (\n      <div className=\"main\" data-test='component-app'>\n        <div className=\"main_heading\">{constants.APP_HEADING}</div>\n            <div className=\"sortBox\" data-test='component-sort'>\n              <SortButton />\n            </div>\n            <div className=\"main_functionality\" data-test='component-accordion'>\n              <div className=\"main_functionality-species\">\n                <Accordion\n                  title={constants.ACCORDION_TEXT}\n                  content={[<SpeciesView key={1}/>, <GenderView key={2}/>, <OriginView key={3} />]}\n                />\n              </div>\n            </div>\n            <div className=\"main_input\" data-test='component-search'>\n              <SearchView />\n            </div>\n            <div className=\"viewcontent\" data-test='component-content'>\n              <ListItems filteredItem={filteredItem} />\n            </div>\n            <Footer />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    all_characters: state.character.all_characters,\n    filter_data: state.species.filter_data,\n    filter_gender_data: state.gender.filter_gender_data,\n    filter_origin_data: state.origin.filter_origin_data,\n    search_text: state.search.search_text,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getCharacters: () => dispatch(actionCreator.getCharacters()),\n    sortAscendingById: () => dispatch(actionCreator.sortAscendingById()),\n    sortDescendingById: () => dispatch(actionCreator.sortDescendingById()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import * as actionTypes from \"../types\";\n\nconst initialState = {\n  all_characters: [],\n  error_text: ''\n};\n\n/**\n * @function characterReducer\n * @param { Object } state - Initial state of the character reducer\n * @param { String } action - dispatch action type to change state accordingly.\n * @returns { Object } state - return the updated state based on action type\n */\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_CHARACTERS_ASYNC:\n      return {\n        ...state,\n        all_characters: state.all_characters.concat(action.payload),\n        error_text: ''\n      };\n      case actionTypes.REQUESTED_DATA_ERROR:\n        return {\n          ...state,\n          all_characters: [],\n          error_text: action.payload\n        }\n    case actionTypes.SORT_DATA_BY_ASCENDING:\n      return {\n        ...state,\n        all_characters: state.all_characters\n          .slice()\n          .sort((a, b) => a.id - b.id),\n      };\n\n    case actionTypes.SORT_DATA_BY_DESCENDING:\n      return {\n        ...state,\n        all_characters: state.all_characters\n          .slice()\n          .sort((a, b) => b.id - a.id),\n      };\n    default:\n      return state;\n  }\n};\n\n","import * as actionTypes from \"../types\";\n\nconst initialState = {\n  filter_gender_data: [],\n};\n\n/**\n * @function genderReducer\n * @param { Object } state - Initial state of the character reducer\n * @param { String } action - dispatch action type to change state accordingly.\n * @returns { Object } state - return the updated state based on action type\n */\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_GENDER_FILTERED_DATA:\n      return {\n        ...state,\n        filter_gender_data: state.filter_gender_data.concat(action.payload),\n      };\n\n    case actionTypes.REMOVE_GENDER_FILTERED_DATA:\n      const idx = state.filter_gender_data.indexOf(action.payload);\n      return {\n        ...state,\n        filter_gender_data: state.filter_gender_data\n          .slice(0, idx)\n          .concat(\n            state.filter_gender_data.slice(\n              idx + 1,\n              state.filter_gender_data.length\n            )\n          ),\n      };\n\n    default:\n      return state;\n  }\n};\n","import * as actionTypes from \"../types\";\n\nconst initialState = {\n  filter_origin_data: [],\n};\n\n\n/**\n * @function originReducer\n * @param { Object } state - Initial state of the character reducer\n * @param { String } action - dispatch action type to change state accordingly.\n * @returns { Object } state - return the updated state based on action type\n */\n\nexport default  (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_ORIGIN_FILTERED_DATA:\n      return {\n        ...state,\n        filter_origin_data: state.filter_origin_data.concat(action.payload),\n      };\n\n    case actionTypes.REMOVE_ORIGIN_FILTERED_DATA:\n      const OriginIdx = state.filter_origin_data.indexOf(action.payload);\n      return {\n        ...state,\n        filter_origin_data: state.filter_origin_data\n          .slice(0, OriginIdx)\n          .concat(\n            state.filter_origin_data.slice(\n              OriginIdx + 1,\n              state.filter_origin_data.length\n            )\n          ),\n      };\n\n    default:\n      return state;\n  }\n};\n","import * as actionTypes from \"../types\";\n\nconst initialState = {\n  filter_data: [],\n};\n\n/**\n * @function speciesReducer\n * @param { Object } state - Initial state of the character reducer\n * @param { String } action - dispatch action type to change state accordingly.\n * @returns { Object } state - return the updated state based on action type\n */\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_FILTERED_DATA:\n      return {\n        ...state,\n        filter_data: state.filter_data.concat(action.data),\n      };\n\n    case actionTypes.ADD_FILTERED_DATA:\n      return {\n        ...state,\n        filter_data: state.filter_data.concat(action.payload),\n      };\n\n    case actionTypes.REMOVE_FILTERED_DATA:\n      const index = state.filter_data.indexOf(action.payload);\n      return {\n        ...state,\n        filter_data: state.filter_data\n          .slice(0, index)\n          .concat(state.filter_data.slice(index + 1, state.filter_data.length)),\n      };\n\n    default:\n      return state;\n  }\n};\n","import * as actionTypes from \"../types\";\n\nconst initialState = {\n    search_text: ''\n  };\n\n/**\n * @function searchReducer\n * @param { Object } state - Initial state of the character reducer\n * @param { String } action - dispatch action type to change state accordingly.\n * @returns { Object } state - return the updated state based on action type\n */\n  export default  (state = initialState, action ) => {\n      switch( action.type ) {\n        case actionTypes.ADD_SEARCH_TEXT:\n            return {\n              ...state,\n              search_text: action.payload\n            }\n     \n         default:\n           return state;\n      }\n  }","import { combineReducers } from 'redux';\nimport characterReducer from './characterReducer';\nimport genderReducer from './genderReducer';\nimport originReducer from './originReducer';\nimport speciesReducer from './speciesReducer';\nimport searchReducer from './searchReducer';\n\n/**\n * @function rootReducer\n * @description - combineReducer used to make a rootReducer as a single point of contact to reducer.\n */\nconst rootReducer = combineReducers({\n  character: characterReducer,\n  gender: genderReducer,\n  origin: originReducer,\n  species: speciesReducer,\n  search: searchReducer\n})\n\nexport default rootReducer;\n","import { put, takeLatest, call, all } from \"redux-saga/effects\";\nimport * as constants from \"../constants\";\nimport * as actionTypes from \"../types\";\n\n/**\n * @function getCharactersAsync\n * @description - dispatch an action when data are fetched from API alongwith payload data passed to reducer to update the state.\n */\nexport function* getCharactersAsync() {\n  try {\n    const endpoint = constants.ENDPOINT_URL;\n    const response = yield call(fetch, endpoint);\n    const data = yield response.json();\n    yield all([\n      put({ type: actionTypes.GET_CHARACTERS_ASYNC, payload: data.results }),\n    ]);\n    // yield put({ type: actionTypes.GET_CHARACTERS_ASYNC, payload: data.results  })\n  } catch (error) {\n    yield put({ type: actionTypes.REQUESTED_DATA_ERROR, payload: constants.REQUESTED_DATA_ERROR_TEXT })\n  }\n}\n\n/**\n * @function getCharacters\n * @returns dispatch the generator function  'GET_CHARACTERS' to fetch data from API.\n */\nexport function* getCharacters() {\n  yield takeLatest(\"GET_CHARACTERS\", getCharactersAsync);\n}\nexport default function* rootSaga() {\n  // yield all([getCharacters()]);\n  yield call(getCharacters);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './components/container/App/App';\nimport rootReducer from './reducers';\nimport rootSaga from './sagas';\nimport './styles/index.scss';\n\n// check redux devtools in window object and apply as a middleware.\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// create the instance of create saga Middleware.\nconst sagaMiddleware = createSagaMiddleware();\n\n// create the store with create store function and pass the same in provider.\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\n\n// Run the Saga Middleware as a watcher to check the rootSaga file.\nsagaMiddleware.run(rootSaga);\n\n// Render App component and pass store to each component with Provider\nReactDOM.render(\n    <Provider store={ store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)"],"sourceRoot":""}